#!/usr/bin/env python3
"""Transform snippet CSV into annotation YAML for the Codex graph."""

from __future__ import annotations

import argparse
import csv
import uuid
from pathlib import Path
from typing import Dict, List

import yaml

NAMESPACE = uuid.uuid5(uuid.NAMESPACE_URL, "https://ia-clinique.example/annotations")


def load_rows(csv_path: Path) -> List[Dict[str, str]]:
    with csv_path.open("r", encoding="utf-8", newline="") as handle:
        reader = csv.DictReader(handle)
        rows = []
        for idx, row in enumerate(reader):
            row["__index__"] = str(idx)
            rows.append(row)
        return rows


def generate_id(row: Dict[str, str]) -> str:
    payload = "|".join(
        [
            row.get("tag", ""),
            row.get("source_file", ""),
            str(row.get("page", "")),
            str(row.get("line", "")),
            row.get("snippet", ""),
            row.get("__index__", ""),
        ]
    )
    return str(uuid.uuid5(NAMESPACE, payload))


def coerce_int(value: str | None) -> int | None:
    if value is None:
        return None
    value = value.strip()
    if not value:
        return None
    try:
        return int(float(value))
    except ValueError:
        return None


def build_annotation(row: Dict[str, str]) -> Dict[str, object]:
    data: Dict[str, object] = {
        "id": generate_id(row),
        "type": "clinical_snippet",
        "tag": row.get("tag", "").strip(),
        "snippet": row.get("snippet", "").strip(),
        "source_file": row.get("source_file", "").strip(),
    }
    page = coerce_int(row.get("page"))
    line = coerce_int(row.get("line"))
    if page is not None:
        data["page"] = page
    if line is not None:
        data["line"] = line
    return data


def main() -> int:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument("csv_path", type=Path, help="CSV generated by extract_snippets.py")
    parser.add_argument(
        "knowledge_items",
        type=Path,
        help="knowledge_items_clean.yaml path",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Destination file (stdout if omitted)",
    )
    args = parser.parse_args()

    if not args.knowledge_items.exists():
        raise FileNotFoundError(f"Knowledge items file not found: {args.knowledge_items}")

    rows = load_rows(args.csv_path)
    annotations = [build_annotation(row) for row in rows]

    payload = {"annotations": annotations}
    text = yaml.safe_dump(payload, allow_unicode=True, sort_keys=False)

    if args.output:
        args.output.write_text(text, encoding="utf-8")
    else:
        print(text)
    return 0


if __name__ == "__main__":
    raise SystemExit(main())
